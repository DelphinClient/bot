import os
import logging
import random
import asyncio
import filetype
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from telethon.tl.functions.account import GetAuthorizationsRequest
from telethon.tl.functions.users import GetFullUserRequest
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_BOT_TOKEN = "8318696400:AAHYmCrjC4L7bKDnlJ_JueBhbUS6ErJcs2E"
FUN_CHANNEL = "sexualr34"  # –ö–∞–Ω–∞–ª –¥–ª—è .fun –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ @)

user_clients = {}
user_states = {}
user_telethon_ids = {}

os.makedirs("sessions", exist_ok=True)
os.makedirs("temp", exist_ok=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    await query.answer()
    if query.data == 'register':
        await context.bot.send_message(chat_id, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API_ID:")
        context.user_data['step'] = 'api_id'

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    step = context.user_data.get('step')

    if step == 'api_id':
        try:
            context.user_data['api_id'] = int(text)
            await context.bot.send_message(chat_id, "üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API_HASH:")
            context.user_data['step'] = 'api_hash'
        except ValueError:
            await context.bot.send_message(chat_id, "‚ùå API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

    elif step == 'api_hash':
        context.user_data['api_hash'] = text
        await context.bot.send_message(chat_id, "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79123456789):")
        context.user_data['step'] = 'phone'

    elif step == 'phone':
        context.user_data['phone'] = text
        await context.bot.send_message(chat_id, "‚è≥ –ü—ã—Ç–∞—é—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è...")

        api_id = context.user_data['api_id']
        api_hash = context.user_data['api_hash']
        phone = context.user_data['phone']

        if tg_user_id in user_clients:
            await user_clients[tg_user_id].disconnect()
            del user_clients[tg_user_id]

        client = TelegramClient(f"sessions/{tg_user_id}", api_id, api_hash)
        
        try:
            await client.connect()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}")
        except Exception as e:
            await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return

        if not await client.is_user_authorized():
            try:
                sent = await client.send_code_request(phone)
                logger.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {phone}. –¢–∏–ø: {sent.type}")
                await context.bot.send_message(chat_id, "üì® –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram (–≤ —Ñ–æ—Ä–º–∞—Ç–µ '1 2 3 4 5'):")
                context.user_data['client'] = client
                context.user_data['step'] = 'code'
            except Exception as e:
                await client.disconnect()
                await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞: {e}")
        else:
            me = await client.get_me()
            real_user_id = me.id
            user_clients[tg_user_id] = client
            user_states[tg_user_id] = 'active'
            user_telethon_ids[tg_user_id] = real_user_id
            await context.bot.send_message(chat_id, "‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
            await setup_listener(client, tg_user_id, real_user_id, context.bot, chat_id)

    elif step == 'code':
        code = text.replace(' ', '')
        client = context.user_data['client']
        phone = context.user_data['phone']
        
        try:
            await client.sign_in(phone=phone, code=code)
            me = await client.get_me()
            real_user_id = me.id
            user_clients[tg_user_id] = client
            user_states[tg_user_id] = 'active'
            user_telethon_ids[tg_user_id] = real_user_id
            await context.bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
            await setup_listener(client, tg_user_id, real_user_id, context.bot, chat_id)
        except SessionPasswordNeededError:
            await context.bot.send_message(chat_id, "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç 2FA:")
            context.user_data['step'] = 'password'
        except Exception as e:
            await client.disconnect()
            await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")

    elif step == 'password':
        password = text
        client = context.user_data['client']
        
        try:
            await client.sign_in(password=password)
            me = await client.get_me()
            real_user_id = me.id
            user_clients[tg_user_id] = client
            user_states[tg_user_id] = 'active'
            user_telethon_ids[tg_user_id] = real_user_id
            await context.bot.send_message(chat_id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
            await setup_listener(client, tg_user_id, real_user_id, context.bot, chat_id)
        except Exception as e:
            await client.disconnect()
            await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ 2FA: {e}")

async def get_random_media_from_channel(client: TelegramClient, channel_username: str):
    try:
        # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
        channel = await client.get_entity(channel_username)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        messages = await client.get_messages(channel, limit=100)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
        media_messages = [msg for msg in messages if msg.media and (msg.photo or msg.video)]
        
        if not media_messages:
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
        random_media = random.choice(media_messages)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_path = await client.download_media(random_media.media, file="temp/")
        
        return file_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
        return None

async def get_user_id(client: TelegramClient, username: str):
    try:
        if not username.startswith('@'):
            username = '@' + username
        
        user = await client.get_entity(username)
        return user.id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def setup_listener(client: TelegramClient, tg_user_id: int, telethon_user_id: int, bot, chat_id):
    logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram ID: {tg_user_id}, Telethon ID: {telethon_user_id}")

    @client.on(events.NewMessage(from_users=telethon_user_id))
    async def handler(event):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event.text} –æ—Ç {event.sender_id}")

        state = user_states.get(tg_user_id, 'active')
        if state == 'stopped' and not event.text.startswith('.start'):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        text = event.text.strip()

        try:
            if text.startswith('.'):
                await event.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π: {text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        if text == '.help':
            help_text = (
                "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
                "üì± <b>.number</b> ‚Äî –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "üÜî <b>.id @username</b> ‚Äî –ø–æ–ª—É—á–∏—Ç—å Telegram ID\n"
                "üì° <b>.ses</b> ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏\n"
                "üì© <b>.send —Å–æ–æ–±—â–µ–Ω–∏–µ @username</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "üò¥ <b>.sleep</b> ‚Äî –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞\n"
                "üéâ <b>.fun</b> ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª\n"
                "‚õîÔ∏è <b>.stop</b> ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                "‚úÖ <b>.start</b> ‚Äî —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å\n"
                "üóëÔ∏è <b>.clearses</b> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é\n"
                "üéûÔ∏è <b>.anim —Ç–µ–∫—Å—Ç</b> ‚Äî –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
                "üîÅ <b>.spam —Ç–µ–∫—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> ‚Äî —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            )
            await event.respond(help_text, parse_mode='html')
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é")

        elif text == '.stop':
            user_states[tg_user_id] = 'stopped'
            await event.respond("‚õîÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .start —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å.")
            logger.info(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}")

        elif text == '.start':
            user_states[tg_user_id] = 'active'
            await event.respond("‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")
            logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}")

        elif text == '.number':
            me = await client.get_me()
            phone = me.phone if me.phone else "–ù–µ —É–∫–∞–∑–∞–Ω"
            await event.respond(f"üì± –í–∞—à –Ω–æ–º–µ—Ä: {phone}")
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –¥–ª—è {tg_user_id}")

        elif text == '.ses':
            try:
                auths = await client(GetAuthorizationsRequest())
                sessions = "\n".join([f"{i+1}. {auth.device_model} ({auth.ip})" for i, auth in enumerate(auths.authorizations)])
                await event.respond(f"üì° –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n{sessions}")
                logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–µ—Å—Å–∏–π –¥–ª—è {tg_user_id}")
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")

        elif text == '.fun':
            try:
                await event.respond("‚è≥ –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
                media_path = await get_random_media_from_channel(client, FUN_CHANNEL)
                
                if media_path:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
                    if media_path.endswith(('.jpg', '.jpeg', '.png')):
                        await client.send_file(event.chat_id, media_path)
                    elif media_path.endswith(('.mp4', '.mov', '.gif')):
                        await client.send_file(event.chat_id, media_path, supports_streaming=True)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(media_path)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è {tg_user_id}")
                else:
                    await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –≤ –∫–∞–Ω–∞–ª–µ.")
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ .fun: {e}")

        elif text.startswith('.id '):
            try:
                username = text.split(' ')[1]
                user_id = await get_user_id(client, username)
                if user_id:
                    await event.respond(f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {user_id}")
                else:
                    await event.respond(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ .id: {e}")

        elif text.startswith('.send '):
            try:
                parts = text.split(' ', 2)
                if len(parts) < 3:
                    await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .send —Å–æ–æ–±—â–µ–Ω–∏–µ @username")
                    return
                
                message = parts[1]
                username = parts[2]
                user_id = await get_user_id(client, username)
                
                if user_id:
                    await client.send_message(user_id, message)
                    await event.respond(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
                else:
                    await event.respond(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ .send: {e}")

        elif text == '.sleep':
            sleep_messages = [
                "üí§ –°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤!",
                "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏!",
                "üõèÔ∏è –û—Ç–¥—ã—Ö–∞–π —Ö–æ—Ä–æ—à–æ!",
                "üò¥ –°–ø–∏ –∫—Ä–µ–ø–∫–æ!",
                "‚ú® –ü—É—Å—Ç—å —Å–Ω—ã –±—É–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–º–∏!"
            ]
            await event.respond(random.choice(sleep_messages))

        elif text.startswith('.spam '):
            try:
                parts = text.split(' ')
                if len(parts) < 3:
                    await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .spam —Ç–µ–∫—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    return
                
                message = ' '.join(parts[1:-1])
                count = int(parts[-1])
                
                if count > 20:
                    await event.respond("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π - 20")
                    return
                
                for i in range(count):
                    await event.respond(message)
                    await asyncio.sleep(0.5)
                
                await event.respond(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ .spam: {e}")

        elif text.startswith('.anim '):
            try:
                text_to_animate = text[6:]
                if not text_to_animate:
                    await event.respond("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏")
                    return
                
                animated_text = ""
                for i, char in enumerate(text_to_animate):
                    animated_text += char
                    await event.respond(animated_text)
                    await asyncio.sleep(0.3)
            except Exception as e:
                await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ .anim: {e}")

    try:
        if not client.is_connected():
            await client.connect()
        
        if not await client.is_user_authorized():
            logger.error(f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è {tg_user_id}")
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        await client.start()
        logger.info(f"–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {tg_user_id}")
        await bot.send_message(chat_id, "üîå –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è: {e}")

def main():
    app = ApplicationBuilder().token(API_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
